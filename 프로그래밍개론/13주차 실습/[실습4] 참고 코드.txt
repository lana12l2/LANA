#include <stdio.h>
#include <string.h>
#define SIZE 100

// PERSON 구조체 만들기
/* 조건
	1. 구조체를 사용할 것
	2. 이름, 주소, 휴대폰, 특징 요소를 포함할 것
	3. 각 요소는 상수 SIZE를 이용할 것
*/

void menu(); // 메뉴를 출력하는 함수
// 필요한 사용자 정의 함수를 선언할 것 - 정의는 추후
/*
	1. add_record : 파일 맨 끝에 데이터를 추가하는 함수
	   get_record : 사용자로부터 데이터를 받아서 구조체로 반환하는 함수
	2. update_record : 특정 이름의 데이터를 찾아서 수정하는 함수
	3. search_record : 특정 이름의 데이터를 찾는 함수
	   print_record : 저장된 데이터를 출력하는 함수
*/

int main(void)
{
	// 이진 파일(address.dat)을 추가 모드(ab+)로 오픈
	// 반복문 사용하여 사용자 입력에 따른 함수 호출
		/* 흐름
			1. 메뉴 표시
			2. 사용자가 메뉴 선택
			3. 각 선택한 항목에 따른 동작 실행 (함수 호출 및 종료)
		*/
	// 이진 파일 닫기
	return 0;
}

void menu() {
	printf("======================\n");
	printf("1.추가\n");
	printf("2.수정\n");
	printf("3.검색\n");
	printf("4.종료\n");
	printf("======================\n");
}

// [함수#1] get_record() 함수 정의 : gets()를 이용하여 입력 받을 것
// [함수#2] print_record() 함수 정의 
// [함수#3] add_record() 함수 정의
   /* 
   * 1. get_record() 함수를 사용해야 함
   * 2. fseek을 이용해서 파일의 끝으로 가야 함
   * 3. fwrite를 이용해서 파일을 작성해야 함
   */
// [함수#4] search_record() 함수 정의
	/* 
	* 1. fseek을 이용해서 파일의 처음으로 가야 함
	* 2. gets를 이용하여 탐색하고자 하는 사람의 이름을 입력 받기
	* 3. 파일에 저장된 내용과 입력받은 이름을 비교해야 함 - strcmp 함수 사용
	*/
// [함수#5] update_record() 함수 정의
	/* 
	* 1. 새로운 파일 tmp.dat 만들기 - (w) 모드
	* 2. 반복문을 통해 새로운 파일에 기존 파일 내용 전체를 다시 쓰기
	*    이때, 수정할 사람의 이름을 비교하기 (search_record와 유사)
	* 3. get_record() 함수를 이용해서 새로운 데이터를 입력 받기
	* 4. 기존 파일 (address.dat) 삭제
	* 5. 새로운 파일(tmp.dat) 이름을 address.dat으로 바꾸기
	*/
